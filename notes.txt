004131AD - Enters Virtual Machine at this address

0012FBC8  004016F5  vm_test_vmed_01.004016F5
0012FBCC  00412D5C  vm_test_vmed_01.00412D5C



VM Stub starts at 004112FC
 - First argument is where routine used to be in the user .text code section
 - Second argument is where the encrypted bytecode to replace the functionality is
On the stack
First Arg
Second Arg
Return Address
Parameters to the function call
EDX Appears to be setup as the current instruction pointer of the VM


ECX Is relative Instruction pointer

Appears to make a call, pushes VM IP, Instr Lenght - 1, Buffer
00411338 | E8 D8050000              | call vm_test_vmed_01.411915             |

Instruction Structure
[Instruction Length (xored with next byte)][Remaining of instruciton]

Inside an instruction handler:
[ESP+30] resolves to pointer of registers in the following order
EFLAGS
EDI
ESI
EBP
ESP
EBX
EDX
ECX
EAX

EAX, ECX, EDX, EBX, original ESP, EBP, ESI, and EDI
==========================
OPCODE 86, Handler at 0041160E
OC OPERAND1REG[BYTE]

if(OPERAND1REG == ESP)
    VMR = OPERAND1REG + 8;
else
    VMR = OPERAND1REG

==========================
OPCODE B0, Handler at 00411632
OC OPERAND1_CONSTANT_BYTE

VMR += OPERAND1_CONSTANT[BYTE]


==========================
OPCODE 4, Handler at 004118D8
X86 instruction with VMR

==========================
OPCODE 0x73 Handler at 004118B0

OC OP1[byte] OP2[byte] OP3[Data...]
OP3 is OP2 bytes in Length

1. Copy OP2 Bytes from OP3  over start of instruction
2. Add module base address (0x400000) to instructionat OP1 bytes in
3. copy 0x68 into instruction at offset OP2


==========================
OPCODE 0xE3 Handler at 00411803
OPC DWORD PTR
CMP [VMR], OPC



